# ||--------------------------------------------------------------------------------||
# ||                               Other Applications                               ||
# ||--------------------------------------------------------------------------------||

# TODO: Should ALL services have "depends_on" gluetun?

version: "3.7"

services:

# TODO: Add immich after you have studied it
#
#   immich-server:
#     container_name: immich_server
#     image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
#     volumes:
#       - ${UPLOAD_LOCATION}:/usr/src/app/upload
#       - /etc/localtime:/etc/localtime:ro
#     env_file:
#       - .env
#     ports:
#       - 2283:3001
#     depends_on:
#       - redis
#       - database
#     restart: always

#   immich-machine-learning:
#     container_name: immich_machine_learning
#     # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
#     # Example tag: ${IMMICH_VERSION:-release}-cuda
#     image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
#     # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
#     #   file: hwaccel.ml.yml
#     #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
#     volumes:
#       - model-cache:/cache
#     env_file:
#       - .env
#     restart: always

#   redis:
#     container_name: immich_redis
#     image: docker.io/redis:6.2-alpine@sha256:e31ca60b18f7e9b78b573d156702471d4eda038803c0b8e6f01559f350031e93
#     healthcheck:
#       test: redis-cli ping || exit 1
#     restart: always

#   database:
#     container_name: immich_postgres
#     image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
#     environment:
#       POSTGRES_PASSWORD: ${DB_PASSWORD}
#       POSTGRES_USER: ${DB_USERNAME}
#       POSTGRES_DB: ${DB_DATABASE_NAME}
#       POSTGRES_INITDB_ARGS: '--data-checksums'
#     volumes:
#       - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
#     healthcheck:
#       test: pg_isready --dbname='${DB_DATABASE_NAME}' || exit 1; Chksum="$$(psql --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' --tuples-only --no-align --command='SELECT SUM(checksum_failures) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
#       interval: 5m
#       start_interval: 30s
#       start_period: 5m
#     command: ["postgres", "-c" ,"shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on"]
#     restart: always

# volumes:
#   model-cache:

  iperf3:
    image: networkstatic/iperf3
    container_name: iperf3
    hostname: iperf3
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    networks:
      - media
    ports:
      - 5201:5201
    command: '--server'
    restart: "no"

  photoprism:
    image: photoprism/photoprism:latest
    container_name: photoprism
    hostname: photoprism
    stop_grace_period: 10s
    depends_on:
      - photoprism_mariadb
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    environment:
      - PGID=${PGID}
      - PHOTOPRISM_ADMIN_PASSWORD=${PHOTOPRISM_PASSWORD}
      - PHOTOPRISM_ADMIN_USER=${PHOTOPRISM_USERNAME}
      - PHOTOPRISM_AUTH_MODE=password
      - PHOTOPRISM_DATABASE_DRIVER=mysql
      - PHOTOPRISM_DATABASE_NAME=${PHOTOPRISM_DATABASE_NAME}
      - PHOTOPRISM_DATABASE_PASSWORD=${PHOTOPRISM_DATABASE_PASSWORD}
      - PHOTOPRISM_DATABASE_SERVER=photoprism_mariadb:3306
      - PHOTOPRISM_DATABASE_USER=${PHOTOPRISM_DATABASE_USER}
      - PHOTOPRISM_DEFAULT_TLS=true
      - PHOTOPRISM_DETECT_NSFW=false
      - PHOTOPRISM_DISABLE_CHOWN=false
      - PHOTOPRISM_DISABLE_CLASSIFICATION=false
      - PHOTOPRISM_DISABLE_FACES=false
      - PHOTOPRISM_DISABLE_RAW=false
      - PHOTOPRISM_DISABLE_SETTINGS=false
      - PHOTOPRISM_DISABLE_TENSORFLOW=false
      - PHOTOPRISM_DISABLE_TLS=false
      - PHOTOPRISM_DISABLE_VECTORS=false
      - PHOTOPRISM_DISABLE_WEBDAV=false
      - PHOTOPRISM_EXPERIMENTAL=false
      - PHOTOPRISM_FFMPEG_BITRATE=64
      - PHOTOPRISM_FFMPEG_ENCODER=software
      - PHOTOPRISM_FFMPEG_SIZE=3840
      - PHOTOPRISM_GID=${PGID}
      - PHOTOPRISM_HTTP_COMPRESSION=gzip
      - PHOTOPRISM_INIT="https gpu tensorflow"
      - PHOTOPRISM_JPEG_QUALITY=100
      - PHOTOPRISM_LOG_LEVEL=info
      - PHOTOPRISM_ORIGINALS_LIMIT=1000000
      - PHOTOPRISM_RAW_PRESETS=false
      - PHOTOPRISM_READONLY=false
      - PHOTOPRISM_SITE_AUTHOR="John Wyles"
      - PHOTOPRISM_SITE_CAPTION="A walk down memory lane..."
      - PHOTOPRISM_SITE_DESCRIPTION="A walk down memory lane..."
      - PHOTOPRISM_SITE_TITLE="PhotoPrism"
      - PHOTOPRISM_SITE_URL=http://localhost:2342/
      - PHOTOPRISM_UID=${PUID}
      - PHOTOPRISM_UMASK=${UMASK}
      - PHOTOPRISM_UPLOAD_NSFW=true
      - PUID=${PUID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    networks:
      - media
    working_dir: "/photoprism"
    volumes:
      - ${PHOTOS_DIR_LOCAL}:/photoprism/originals
      - ${CONFIG_BASE_DIR}/photoprism/storage:/photoprism/storage
    ports:
      - 2342:2342
    restart: unless-stopped

  photoprism_mariadb:
    image: mariadb:11
    container_name: photoprism_mariadb
    hostname: photoprism_mariadb
    stop_grace_period: 5s
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    environment:
      MARIADB_AUTO_UPGRADE: 1
      MARIADB_INITDB_SKIP_TZINFO: 1
      MARIADB_DATABASE: ${PHOTOPRISM_DATABASE_NAME}
      MARIADB_USER: ${PHOTOPRISM_DATABASE_USER}
      MARIADB_PASSWORD: ${PHOTOPRISM_DATABASE_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${PHOTOPRISM_DATABASE_ROOT_PASSWORD}
    volumes:
      - ${CONFIG_BASE_DIR}/photoprism/database:/var/lib/mysql
    command: --innodb-buffer-pool-size=512M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=60
    restart: unless-stopped

  # TODO: Uncomment this when you know what it does
  #
  # photoprism_ofelia:
  #   image: mcuadros/ofelia:latest
  #   container_name: photoprism_ofelia
  #   hostname: photoprism_ofelia
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ./jobs.ini:/etc/ofelia/config.ini
  #   restart: unless-stopped

  searxng:
    image: searxng/searxng:latest
    container_name: searxng
    hostname: searxng
    environment:
      - SEARXNG_BASE_URL=https://${SEARXNG_HOSTNAME:-localhost}/
    networks:
      - media
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    logging:
      driver: json-file
      options:
        max-size: 1m
        max-file: 1
    volumes:
      - ${CONFIG_BASE_DIR}/searxng:/etc/searxng:rw
    ports:
      - 8082:8080

  syncthing:
    image: lscr.io/linuxserver/syncthing:latest
    container_name: syncthing
    hostname: syncthing
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    network_mode: host
    volumes:
      - ${CONFIG_BASE_DIR}/syncthing:/config
      - ${SYNCTHING_MOUNT_DIR_1_LOCAL}:${SYNCTHING_MOUNT_DIR_1_RELATIVE}
      - ${SYNCTHING_MOUNT_DIR_2_LOCAL}:${SYNCTHING_MOUNT_DIR_2_RELATIVE}
    restart: unless-stopped

  tailscale:
    image: tailscale/tailscale:latest
    container_name: tailscale
    hostname: ${TAILSCALE_HOSTNAME}
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SYS_MODULE
    privileged: true
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TAILSCALE_HOSTNAME=${TAILSCALE_HOSTNAME:?err}
      - TAILSCALE_STATE_ARG=${TAILSCALE_STATE_ARG}
      - TS_ACCEPT_DNS=${TS_ACCEPT_DNS}
      - TS_AUTHKEY=${TS_AUTHKEY:?err}
      - TS_DEST_IP=${TS_DEST_IP}
      - TS_EXTRA_ARGS=${TS_EXTRA_ARGS}
      - TS_KUBE_SECRET=${TS_KUBE_SECRET}
      - TS_OUTBOUND_HTTP_PROXY_LISTEN=${TS_OUTBOUND_HTTP_PROXY_LISTEN}
      - TS_ROUTES=${TS_ROUTES}
      - TS_SOCKET=${TS_SOCKET}
      - TS_SOCKS5_SERVER=${TS_SOCKS5_SERVER}
      - TS_STATE_DIR=${TS_STATE_DIR}
      - TS_TAILSCALED_EXTRA_ARGS=${TS_TAILSCALED_EXTRA_ARGS}
      - TS_USERSPACE=${TS_USERSPACE}
      - TZ=${TZ}
      - UMASK=${UMASK}
    network_mode: host
    volumes:
      - ${CONFIG_BASE_DIR}/tailscale/varlib:/var/lib
      - /dev/net/tun:/dev/net/tun
      - ${CONFIG_BASE_DIR}/tailscale/tmp:/tmp
    restart: unless-stopped

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    hostname: watchtower
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
      - UMASK=${UMASK}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_LABEL_ENABLE=false
      - WATCHTOWER_NOTIFICATION_REPORT=true
      - WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_NOTIFICATION_URL}
      - WATCHTOWER_POLL_INTERVAL=${WATCHTOWER_POLL_INTERVAL}
      - WATCHTOWER_REMOVE_VOLUMES=true
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - media
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

networks:
  media:
    name: media
    # external: true
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
      com.docker.network.bridge.name: "media"
      com.docker.network.driver.mtu: "1500"
    ipam:
      config:
        - subnet: ${SUBNET}
          gateway: ${GATEWAY_IP}
          ip_range: ${IP_RANGE}
